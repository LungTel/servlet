
---------------------JDBCの使い方----------------------------

Java→JDBC←DB

今回は、javaファイルを右クリック > 実行 > Javaアプリケーションの実行

■流れ
	用語
	DriverManger
	 →JDBCドライバを管理するためのクラス。Connectionオブジェクト取得に使用
	Connection
	 →データベーｓうとの「接続」を表すインタフェース。Statementオブジェクトを取得に使用
	Statement
	 →SQL発行するためのインタフェース
	ResultSet
	 →検索SQLを発行した場合の結果を表すクラス


	1. Class.forNmae()メソッドでJDBCドライバをロードする
	2. DriverManager#getConnection()メソッドでConnectionオブジェクト(DBとの接続）を取得
	3. Connection#createStatement()メソッドでStatementオブジェクト(SQLの実行口)を取得する
	4. 更新(INSERT, UPDATE, DELETE)の場合は、Statement#executeUpdate()メソッド、検索（SELECT)の場合は
	   Statement#executeQuery()メソッドを実行


■準備
hsqldb.jar
	取得元 : C:\hsqldb\lib
	配置先 : WEB-INF/lib


p461-463
【クラスパスを通す】(hsqldb.jar for DBManager)
	WEB-INF/lib/hsqldb.jarを右クリック > ビルドパス > ビルドパスの追加

	★問題発生の理由
		・データベースを起動していなかった

		C:\hsqldb\mydb
			runt.bat
				→データベースの起動
			runmanager.bat
				→クライアントツールの起動（これはデータベースの中身を参照する時に使う、Eclipseの際は閉じる）


	Class.forName("org.hsqldb.jdbcDriver");とは？
	 →このメソッドは、引数にした名前のクラスをロードして返すメソッドです。クラスはロード時、最初にstaticの
	   イニシャライザが実行されます。
	   JavaVMの実行中に一回行えば十分です。簡単に記述するためこのようになっているが、getConnection()の呼び出しの
	   たびに何度も実行されます。

	 ※HSQLDBのjdbcDriverクラスのstaticイニシャライザは以下のようにDriverManagerに自分自身のインスタンスを
	   登録する処理が行われている

	   static {
	   		try {
	   			DriverManager.registerDriver(new jdbcDriver());
	   		} catch (Exception e) {
		}



		したがって、下記のように単にjdbcDriverクラスを宣言しただけでもstaticイニシャライザが呼ばれるので動作します。

		// Class.forName("org.hsqldb.jdbcDriver");
		DriverManager.registerDriver(new org.hsqldb.jdbcDriver());


getConnectionメソッド
	public static Connection getConnection(String url, String user, String password)

	url : "jdbc:hsqldb:hsql://localhost"
			→"jdbc:hsqldb:hsql://ホスト名:ポート番号"でも可能
	user : "sa"
	password : ""


※標準ポート : 9001(HSQLDBの場合）


※ResultSetのCloseは必要か？(UpdateSample2)
	ResultSetはJDBCの仕様上, Statementのclose時に開放（ResultSetもclose)されるものです。しかし、古いメジャーな
	JDBCドライバの中にはStatementがcloseしても、ResultSetがcloseされないものがありました。
	そのため、下記のように3段closeが見かけれることがあります。

	rs.close();
	smt.close();
	con.close();

	なお、ResultSetも利用し終わったらすぐにcloseした方がよいので、この書き方がおかしいわけではありません。


【トランザクション】
void commit()
	→コミットする
void rollback()
	→ロールバックする

void setAutocommit(boolean isCommit)
	→オートコミットを設定する。引数がtrueの場合はオン、falseの場合はオフ
	  SQLを一つ発行するたびに自動的にトランザクションをコミットする機能です。

	※DBMnagerのクライアントツールの場合
		Options > AutoCommit On


ロック
	データベースの同期制御（複数のクライアントが同時にアクセスした場合の制御）

	例）
	SELECT MONEY FROM ACCOUNT WHERE ID = 1 FOR UPDATE
		→別のユーザーのトランザクションで止まっていても、現在の状態を表示















