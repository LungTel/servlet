
------------------------下のWebアプリケーションで実行-------------------

■WEBの参照URL
http://localhost:8080/dbweb/servlet/websample.SelectServlet
http://localhost:8080/dbweb/servlet/websample.SelectServlet2
http://localhost:8080/dbweb/servlet/websample.RowSetSelectServlet
http://localhost:8080/dbweb/websample/select_input.jsp
→データベースのNAMEに部分一致
http://localhost:8080/dbweb/servlet/websample.SimpleUpdateTest
http://localhost:8080/dbweb/servlet/websample.SimpleFindTest
http://localhost:8080/dbweb/servlet/websample.SelectServlet3

※このようなパスの原因はInvokerによる他プロジェクトのURL.txtを参照
	web.xmlに記載する場合
		http://localhost:8080/mores/app.LifeCycleServlet



---------------------JDBCの使い方----------------------------

Java→JDBC←DB

今回は、javaファイルを右クリック > 実行 > Javaアプリケーションの実行

■流れ
	用語
	DriverManger
	 →JDBCドライバを管理するためのクラス。Connectionオブジェクト取得に使用
	Connection
	 →データベーｓうとの「接続」を表すインタフェース。Statementオブジェクトを取得に使用
	Statement
	 →SQL発行するためのインタフェース
	ResultSet
	 →検索SQLを発行した場合の結果を表すクラス


	1. Class.forNmae()メソッドでJDBCドライバをロードする
	2. DriverManager#getConnection()メソッドでConnectionオブジェクト(DBとの接続）を取得
	3. Connection#createStatement()メソッドでStatementオブジェクト(SQLの実行口)を取得する
	4. 更新(INSERT, UPDATE, DELETE)の場合は、Statement#executeUpdate()メソッド、検索（SELECT)の場合は
	   Statement#executeQuery()メソッドを実行


■準備
hsqldb.jar
	取得元 : C:\hsqldb\lib
	配置先 : WEB-INF/lib


p461-463
【クラスパスを通す】(hsqldb.jar for DBManager)
	WEB-INF/lib/hsqldb.jarを右クリック > ビルドパス > ビルドパスの追加

	★問題発生の理由
		・データベースを起動していなかった

		C:\hsqldb\mydb
			runt.bat
				→データベースの起動
			runmanager.bat
				→クライアントツールの起動（これはデータベースの中身を参照する時に使う、Eclipseの際は閉じる）


	Class.forName("org.hsqldb.jdbcDriver");とは？
	 →このメソッドは、引数にした名前のクラスをロードして返すメソッドです。クラスはロード時、最初にstaticの
	   イニシャライザが実行されます。
	   JavaVMの実行中に一回行えば十分です。簡単に記述するためこのようになっているが、getConnection()の呼び出しの
	   たびに何度も実行されます。

	 ※HSQLDBのjdbcDriverクラスのstaticイニシャライザは以下のようにDriverManagerに自分自身のインスタンスを
	   登録する処理が行われている

	   static {
	   		try {
	   			DriverManager.registerDriver(new jdbcDriver());
	   		} catch (Exception e) {
		}



		したがって、下記のように単にjdbcDriverクラスを宣言しただけでもstaticイニシャライザが呼ばれるので動作します。

		// Class.forName("org.hsqldb.jdbcDriver");
		DriverManager.registerDriver(new org.hsqldb.jdbcDriver());


getConnectionメソッド
	public static Connection getConnection(String url, String user, String password)

	url : "jdbc:hsqldb:hsql://localhost"
			→"jdbc:hsqldb:hsql://ホスト名:ポート番号"でも可能
	user : "sa"
	password : ""


※標準ポート : 9001(HSQLDBの場合）


※ResultSetのCloseは必要か？(UpdateSample2)
	ResultSetはJDBCの仕様上, Statementのclose時に開放（ResultSetもclose)されるものです。しかし、古いメジャーな
	JDBCドライバの中にはStatementがcloseしても、ResultSetがcloseされないものがありました。
	そのため、下記のように3段closeが見かけれることがあります。

	rs.close();
	smt.close();
	con.close();

	なお、ResultSetも利用し終わったらすぐにcloseした方がよいので、この書き方がおかしいわけではありません。


【トランザクション】(TransactionSample)
void commit()
	→コミットする
void rollback()
	→ロールバックする

void setAutocommit(boolean isCommit)
	→オートコミットを設定する。引数がtrueの場合はオン、falseの場合はオフ
	  SQLを一つ発行するたびに自動的にトランザクションをコミットする機能です。

	※DBMnagerのクライアントツールの場合
		Options > AutoCommit On


ロック
	データベースの同期制御（複数のクライアントが同時にアクセスした場合の制御）

	例）
	SELECT MONEY FROM ACCOUNT WHERE ID = 1 FOR UPDATE
		→読み取りと同時にロックをかけることで、次のUPDATE処理のコミット（ロック解除）まで誰にも更新されない


デッドロック
	複数のトランザクションがロックの取り合いでお見合い状態になり、処理が進まなくなること


PreparentStatement(PreparedSample)
	Preparend(準備された）という名前の通り、プリコンパイルされたSQLを発行するためのインタフェースです

		構文解説
	    	String sql = "UPDATE ACCOUNT SET MONEY=? WHERE NAME=?";

	        ps.setInt(1, 3000);
	        ps.setString(2, "ボブ");

	        	→SET MONEY=?, 最初の?であることからsetの第一引数が1である値を探す
	        		(1,3000)

	        	  WHERE NEME=?, 二番目の?であることからsetの第二引数が2である値を探す
	        	  	(2, "ボブ");

						結果→String sql = "UPDATE ACCOUNT SET MONEY = 3000 WHERE NAME= 'ボブ' ";



■Webアプリケーションとデータベース
JDBCの使い方

JavaアプリとWebアプリの違い
	hsqldb.jarのクラスパスの配置が異なる

	Javaアプリ : プロジェクトのhsqldb.jarを右クリック > ビルドパス > ビルドパスの追加
		取得場所 : C:\eclipse\pleiades\servlet\dbweb\WEB-INF\lib\hsqldb.jar

	Webアプリ : WEB-INF/libに配置
		配置場所 : C:\eclipse\pleiades\servlet\dbweb\WEB-INF\lib\hsqldb.jar
		または、<Tomcatをインストールしたディレクトリ> /lib/hsqldb.jar


リクエストごとのコネクション
	一つのリクエストについて一つのコネクション

ResultSetの転送問題
	・JSPで表示が終わるまでコネクションを閉じない
	・ResultSetを別のオブジェクトに詰め替える
		→JavaBeanに詰め替えるのが一般的である

RowSetインタフェースの利用（RowSetSelectServlet）
	・insertRow(),updateRow()といったメソッドで、プログラマがSQL文字列を組み立てずに更新処理が行える
	・CachedRowSetはResultSetの値を内部に保持するので、ResultSetを閉じてからJSPに値を渡すことが可能
	・RowSetはResultSetのサブインタフェースなので、利用者は、馴染みのあるResultSetを操作するのと同じ方法で行える


■データベースアクセスの改良（SimpleUpdateTest, SimpleFindTest)
	JDBCを利用したプログラムで、ConnectionやStatement、try-catch処理、リソース開放をDBManagerクラスに集約

DAO(Data Access Object)
 →DAOクラスのメソッドの引数や戻り値にDTO(Data Transfer Object)が利用されるのでDAO/DTOパターンとも呼ばれる。


※デザインパターンとJava EEパターン
GoFはオブジェクト指向一般のパターン
	サーブレットのフィルタはGofのChain of Responsibilityというパターンに利用されていたり…

Java EEパターンはJava EEアプリケーション用のパターン
	例では、DAO/DTOパターンなど


■データソースの利用
コネクションプール
	→Webアプリでは、リクエストごとにコネクションを開いて閉じてを行います。しかし、コネクションの取得や解放は
	  コストの高い処理です。（処理時間のかかる処理です）この問題を解決するために「コネクションプール」という
	  方法が使われます。コネクションプールでは、あらかじめコネクションを複数件取得しておき、実際に利用するときは、
	  新たに接続しにいくのではなく、プールの中から割り当てます


【データソース】
	コネクションプールなどの機能を提供する技術は「データソース」と呼ばれます。
	データソースは、javax.sql.DataSouceインタフェースとして標準化されています。
	本来、データソースを利用するにはDataSouceの実装が必要になりますが、たいていのアプリケーションサーバでは
	付属機能として提供しています。データソースはアプリケーション内でnewして使うこともできますが、
	通常は後述の「JNDI経由でルックアップ」という方法で取得します。







